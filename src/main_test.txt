#include <easyx.h>
#include <Eigen/Dense>
#include <iostream>
#include <cmath>

// 窗口尺寸
const int WIDTH = 800;
const int HEIGHT = 600;

// 顶点结构
struct Vertex {
    Eigen::Vector3f position;
    COLORREF color;
};

// 初始化正方形顶点
Vertex vertices[4] = {
    {{-0.5f, -0.5f, 0.0f}, RGB(255, 0, 0)},
    {{ 0.5f, -0.5f, 0.0f}, RGB(0, 255, 0)},
    {{ 0.5f,  0.5f, 0.0f}, RGB(0, 0, 255)},
    {{-0.5f,  0.5f, 0.0f}, RGB(255, 0, 0)}
};

// 相机参数
Eigen::Vector3f cameraPos(0.0f, 0.0f, 3.0f);
Eigen::Vector3f cameraFront(0.0f, 0.0f, -1.0f);
Eigen::Vector3f cameraUp(0.0f, 1.0f, 0.0f);

float deltaTime = 0.0f;
float lastFrame = 0.0f;
float yaw = -90.0f;
float pitch = 0.0f;

#define M_PI 3.1415926

// 投影矩阵
Eigen::Matrix4f perspective(float fov, float aspect, float zNear, float zFar) {
    Eigen::Matrix4f proj = Eigen::Matrix4f::Zero();
    float tanHalfFov = std::tan(fov / 2.0f);
    proj(0, 0) = 1.0f / (aspect * tanHalfFov);
    proj(1, 1) = 1.0f / tanHalfFov;
    proj(2, 2) = -(zFar + zNear) / (zFar - zNear);
    proj(2, 3) = -(2.0f * zFar * zNear) / (zFar - zNear);
    proj(3, 2) = -1.0f;
    return proj;
}

// 视图矩阵
Eigen::Matrix4f lookAt(Eigen::Vector3f position, Eigen::Vector3f target, Eigen::Vector3f up) {
    Eigen::Vector3f zaxis = (position - target).normalized();
    Eigen::Vector3f xaxis = up.cross(zaxis).normalized();
    Eigen::Vector3f yaxis = zaxis.cross(xaxis);

    Eigen::Matrix4f view = Eigen::Matrix4f::Identity();
    view(0, 0) = xaxis.x();
    view(0, 1) = xaxis.y();
    view(0, 2) = xaxis.z();
    view(1, 0) = yaxis.x();
    view(1, 1) = yaxis.y();
    view(1, 2) = yaxis.z();
    view(2, 0) = zaxis.x();
    view(2, 1) = zaxis.y();
    view(2, 2) = zaxis.z();
    view(0, 3) = -xaxis.dot(position);
    view(1, 3) = -yaxis.dot(position);
    view(2, 3) = -zaxis.dot(position);
    return view;
}

// 处理输入
void processInput() {
    POINT cursorPos;
    GetCursorPos(&cursorPos); // 获取鼠标在屏幕上的位置

    // 将屏幕坐标转换为窗口坐标
    ScreenToClient(GetHWnd(), &cursorPos);

    float cameraSpeed = 0.5f * deltaTime;
    if (GetAsyncKeyState('W') & 0x8000)
        cameraPos += cameraSpeed * cameraFront;
    if (GetAsyncKeyState('S') & 0x8000)
        cameraPos -= cameraSpeed * cameraFront;
    if (GetAsyncKeyState('A') & 0x8000)
        cameraPos -= cameraSpeed * cameraFront.cross(cameraUp).normalized();
    if (GetAsyncKeyState('D') & 0x8000)
        cameraPos += cameraSpeed * cameraFront.cross(cameraUp).normalized();

    float sensitivity = 0.001f;
    float xOffset = sensitivity * (cursorPos.x - WIDTH / 2.);
    float yOffset = sensitivity * (HEIGHT / 2 - cursorPos.y);
    yaw += xOffset;
    pitch += yOffset;
 /*   if (pitch > 89.0f)
        pitch = 89.0f;
    if (pitch < -89.0f)
        pitch = -89.0f;*/

    Eigen::Vector3f front;
    front.x() = std::cos(yaw * M_PI / 180.0f) * std::cos(pitch * M_PI / 180.0f);
    front.y() = std::sin(pitch * M_PI / 180.0f);
    front.z() = std::sin(yaw * M_PI / 180.0f) * std::cos(pitch * M_PI / 180.0f);
    cameraFront = front.normalized();
}

// 渲染正方形
void renderSquare(const Eigen::Matrix4f& model, const Eigen::Matrix4f& view, const Eigen::Matrix4f& projection) {

    for (int i = 0; i < 4; ++i) {
        Eigen::Vector4f pos = projection * view * model * Eigen::Vector4f(vertices[i].position.x(), vertices[i].position.y(), vertices[i].position.z(), 1.0f);
        if (pos.w() != 0.0f) {
            pos /= pos.w();
        }
        int x = static_cast<int>((pos.x() * 0.5f + 0.5f) * WIDTH);
        int y = static_cast<int>((-pos.y() * 0.5f + 0.5f) * HEIGHT);
        setlinecolor(vertices[i].color);
        circle(x, y, 10);
    }
}

#define M_PI 3.1415926

int main() {
    initgraph(WIDTH, HEIGHT);
    setbkcolor(WHITE);
    cleardevice();
    //setrendermode(RENDER_MANUAL);

    // 透视投影矩阵
    Eigen::Matrix4f proj = perspective(45.0f * M_PI / 180.0f, (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    // 渲染循环
    while (true) {
        float currentFrame = GetTickCount() / 1000.0f;
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;

        processInput();

        // 视图矩阵
        Eigen::Matrix4f view = lookAt(cameraPos, cameraPos + cameraFront, cameraUp);

        // 模型矩阵（可以进行旋转变换）
        Eigen::Matrix4f model = Eigen::Matrix4f::Identity();

        // 清屏
        cleardevice();

        // 渲染正方形
        renderSquare(model, view, proj);

        // 刷新屏幕
        Sleep(16);
    }

    closegraph();
    return 0;
}
